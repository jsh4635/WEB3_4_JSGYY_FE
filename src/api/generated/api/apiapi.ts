/* tslint:disable */
/* eslint-disable */
/**
 * 4차 프로젝트 7팀 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountDTO } from '../models';
// @ts-ignore
import type { AlarmDTO } from '../models';
// @ts-ignore
import type { BidDTO } from '../models';
// @ts-ignore
import type { BlockMemberDTO } from '../models';
// @ts-ignore
import type { CategoryDTO } from '../models';
// @ts-ignore
import type { ChatRoomListResponseDto } from '../models';
// @ts-ignore
import type { ChatRoomRequestDto } from '../models';
// @ts-ignore
import type { CreateResponseDto } from '../models';
// @ts-ignore
import type { DTO } from '../models';
// @ts-ignore
import type { DepositDTO } from '../models';
// @ts-ignore
import type { ExchangeDTO } from '../models';
// @ts-ignore
import type { FollowRequestDto } from '../models';
// @ts-ignore
import type { FollowResponseDto } from '../models';
// @ts-ignore
import type { LoginDto } from '../models';
// @ts-ignore
import type { MemberDTO } from '../models';
// @ts-ignore
import type { MessageSearchDTO } from '../models';
// @ts-ignore
import type { OneDataDTO } from '../models';
// @ts-ignore
import type { PaymentDTO } from '../models';
// @ts-ignore
import type { WithdrawDTO } from '../models';
/**
 * APIApi - axios parameter creator
 * @export
 */
export const APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 입찰 기능
         * @param {number} postId 
         * @param {BidDTO} bidDTO 입찰 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidPrice: async (postId: number, bidDTO: BidDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('bidPrice', 'postId', postId)
            // verify required parameter 'bidDTO' is not null or undefined
            assertParamExists('bidPrice', 'bidDTO', bidDTO)
            const localVarPath = `/api/auction/{postId}/bid`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bidDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 정보 변경 - 차단
         * @param {BlockMemberDTO} blockMemberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockMember: async (blockMemberDTO: BlockMemberDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockMemberDTO' is not null or undefined
            assertParamExists('blockMember', 'blockMemberDTO', blockMemberDTO)
            const localVarPath = `/api/admin/members/block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blockMemberDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물품 구매 확정 기능
         * @param {PaymentDTO} paymentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmExchange: async (paymentDTO: PaymentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentDTO' is not null or undefined
            assertParamExists('confirmExchange', 'paymentDTO', paymentDTO)
            const localVarPath = `/api/pay/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 계좌 생성
         * @param {AccountDTO} accountDTO 계좌 생성 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (accountDTO: AccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountDTO' is not null or undefined
            assertParamExists('createAccount', 'accountDTO', accountDTO)
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlarm: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alarms/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카테고리 생성
         * @param {CategoryDTO} categoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (categoryDTO: CategoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryDTO' is not null or undefined
            assertParamExists('createCategory', 'categoryDTO', categoryDTO)
            const localVarPath = `/api/admin/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채팅방 생성
         * @param {ChatRoomRequestDto} chatRoomRequestDto 채팅방 생성 요청 Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatroom: async (chatRoomRequestDto: ChatRoomRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomRequestDto' is not null or undefined
            assertParamExists('createChatroom', 'chatRoomRequestDto', chatRoomRequestDto)
            const localVarPath = `/api/chat/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoomRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 팔로우
         * @param {FollowRequestDto} followRequestDto 팔로우 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollow: async (followRequestDto: FollowRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followRequestDto' is not null or undefined
            assertParamExists('createFollow', 'followRequestDto', followRequestDto)
            const localVarPath = `/api/follow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 작성
         * @param {  DTO} dTO 게시글 작성 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (dTO:   DTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dTO' is not null or undefined
            assertParamExists('createPost', 'dTO', dTO)
            const localVarPath = `/api/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알람 삭제
         * @param {number} id 알람 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlarm: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAlarm', 'id', id)
            const localVarPath = `/api/alarms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카테고리 삭제
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteCategory', 'categoryId', categoryId)
            const localVarPath = `/api/admin/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채팅방 삭제
         * @param {number} id 채팅방 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatroom: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChatroom', 'id', id)
            const localVarPath = `/api/chat/rooms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 삭제
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deletePost', 'postId', postId)
            const localVarPath = `/api/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 충전 요청 기능
         * @param {DepositDTO} depositDTO 충전 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAccount: async (depositDTO: DepositDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'depositDTO' is not null or undefined
            assertParamExists('depositAccount', 'depositDTO', depositDTO)
            const localVarPath = `/api/pay/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채팅방 입장 시 채팅 조회
         * @param {number} roomId 채팅방 ID
         * @param {MessageSearchDTO} messageSearchDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterRoom: async (roomId: number, messageSearchDTO: MessageSearchDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('enterRoom', 'roomId', roomId)
            // verify required parameter 'messageSearchDTO' is not null or undefined
            assertParamExists('enterRoom', 'messageSearchDTO', messageSearchDTO)
            const localVarPath = `/api/chat/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (messageSearchDTO !== undefined) {
                for (const [key, value] of Object.entries(messageSearchDTO)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 닉네임 회원 검색
         * @param {string} nickname 검색할 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberByNickname: async (nickname: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('findMemberByNickname', 'nickname', nickname)
            const localVarPath = `/api/member/nickname`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 보유금 조회
         * @param {} UNKNOWN_PARAMETER_NAME 계좌 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (UNKNOWN_PARAMETER_NAME: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (UNKNOWN_PARAMETER_NAME !== undefined) {
                localVarQueryParameter['id'] = UNKNOWN_PARAMETER_NAME;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 알람 목록 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 당 알림 수
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlarms: async (page: number, size: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAlarms', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getAlarms', 'size', size)
            const localVarPath = `/api/alarms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카테고리 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 채팅방 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRooms: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/rooms/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 거래 내역 조회
         * @param {} UNKNOWN_PARAMETER_NAME 계좌 ID
         * @param {string} type 거래 타입(sender : 출금, receiver : 입금, all : 전체는 생략가능)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeAccount: async (UNKNOWN_PARAMETER_NAME: any, type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getExchangeAccount', 'type', type)
            const localVarPath = `/api/account/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (UNKNOWN_PARAMETER_NAME !== undefined) {
                localVarQueryParameter['id'] = UNKNOWN_PARAMETER_NAME;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * sort의 값을 \"id\"로 변경하고 진행
         * @summary 팔로잉 목록 조회
         * @param {number} [page] 페이지 번호
         * @param {number} [size] 페이지 크기
         * @param {string} [sort] 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollows: async (page?: number, size?: number, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/follow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내가 좋아요한 게시글 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLikes: async (page: number, size: number, sort: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getMyLikes', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getMyLikes', 'size', size)
            // verify required parameter 'sort' is not null or undefined
            assertParamExists('getMyLikes', 'sort', sort)
            const localVarPath = `/api/member/mylikes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 게시글 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPosts: async (page: number, size: number, sort: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getMyPosts', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getMyPosts', 'size', size)
            // verify required parameter 'sort' is not null or undefined
            assertParamExists('getMyPosts', 'sort', sort)
            const localVarPath = `/api/member/myposts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 상세 조회
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPost', 'postId', postId)
            const localVarPath = `/api/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 목록 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {  DTO} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (page: number, size: number, sort: string, searchRequest:   DTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getPosts', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getPosts', 'size', size)
            // verify required parameter 'sort' is not null or undefined
            assertParamExists('getPosts', 'sort', sort)
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('getPosts', 'searchRequest', searchRequest)
            const localVarPath = `/api/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (searchRequest !== undefined) {
                for (const [key, value] of Object.entries(searchRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 좋아요
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likePost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('likePost', 'postId', postId)
            const localVarPath = `/api/posts/{postId}/like`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 로그인 후 response에 출력되는 access를 authorize에 입력
         * @summary 스웨거 전용 로그인
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('login', 'loginDto', loginDto)
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 카테고리(nickname, phoneNum, address)에 따라 유저의 정보를 수정합니다. parameter에 수정할 항목을 작성하고 requestbody에 항목의 수정할 내용을 작성해주세요. 
         * @summary 내 정보 수정
         * @param {string} category 수정할 항목 (nickname, phoneNum, address)
         * @param {OneDataDTO} oneDataDTO 수정할 항목의 내용을 작성해주세요 nickname &#x3D;&gt; 수정할 닉네임 ex) \&quot;data\&quot; : \&quot;newNickname\&quot; phoneNum &#x3D;&gt; 수정할 전화번호 ex) \&quot;data\&quot; : \&quot;newPhoneNum\&quot; address &#x3D;&gt; 수정할 주소 ex) \&quot;data\&quot; : \&quot;newAddress\&quot; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMyDetails: async (category: string, oneDataDTO: OneDataDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('modifyMyDetails', 'category', category)
            // verify required parameter 'oneDataDTO' is not null or undefined
            assertParamExists('modifyMyDetails', 'oneDataDTO', oneDataDTO)
            const localVarPath = `/api/member/modify/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oneDataDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 수정
         * @param {number} postId 게시글 ID
         * @param {  DTO} dTO 수정할 게시글 내용
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPost: async (postId: number, dTO:   DTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('modifyPost', 'postId', postId)
            // verify required parameter 'dTO' is not null or undefined
            assertParamExists('modifyPost', 'dTO', dTO)
            const localVarPath = `/api/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 내 상세 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myDetails: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/member/mydetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 물품 결제 기능
         * @param {PaymentDTO} paymentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsGood: async (paymentDTO: PaymentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentDTO' is not null or undefined
            assertParamExists('paymentsGood', 'paymentDTO', paymentDTO)
            const localVarPath = `/api/pay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 가입할 회원 정보를 RequestBody에 작성하고 실행하세요
         * @summary 회원가입
         * @param {MemberDTO} memberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (memberDTO: MemberDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberDTO' is not null or undefined
            assertParamExists('register', 'memberDTO', memberDTO)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary accessToken 만료 시 refreshToken을 이용하여 accessToken 재발급
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reissue: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reissue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 신고
         * @param {number} postId 게시글 ID
         * @param {  DTO} dTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPost: async (postId: number, dTO:   DTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('reportPost', 'postId', postId)
            // verify required parameter 'dTO' is not null or undefined
            assertParamExists('reportPost', 'dTO', dTO)
            const localVarPath = `/api/posts/{postId}/reports`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 언팔로우
         * @param {FollowRequestDto} followRequestDto 팔로우 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unFollow: async (followRequestDto: FollowRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'followRequestDto' is not null or undefined
            assertParamExists('unFollow', 'followRequestDto', followRequestDto)
            const localVarPath = `/api/follow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 좋아요 취소
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikePost: async (postId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('unlikePost', 'postId', postId)
            const localVarPath = `/api/posts/{postId}/unlike`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카테고리 수정
         * @param {number} categoryId 
         * @param {CategoryDTO} categoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (categoryId: number, categoryDTO: CategoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updateCategory', 'categoryId', categoryId)
            // verify required parameter 'categoryDTO' is not null or undefined
            assertParamExists('updateCategory', 'categoryDTO', categoryDTO)
            const localVarPath = `/api/admin/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 게시글 이미지 업로드 및 삭제
         * @param {number} postId 
         * @param {Array<File>} [images] 
         * @param {Array<number>} [deleteImageIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImages: async (postId: number, images?: Array<File>, deleteImageIds?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('updateImages', 'postId', postId)
            const localVarPath = `/api/posts/{postId}/images`
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

                if (deleteImageIds) {
                localVarFormParams.append('deleteImageIds', deleteImageIds.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 출금 요청 기능
         * @param {WithdrawDTO} withdrawDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawAccount: async (withdrawDTO: WithdrawDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'withdrawDTO' is not null or undefined
            assertParamExists('withdrawAccount', 'withdrawDTO', withdrawDTO)
            const localVarPath = `/api/pay/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(withdrawDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 탈퇴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawal: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/member/withdrawal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            await setApiKeyToObject(localVarHeaderParameter, "access", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 입찰 기능
         * @param {number} postId 
         * @param {BidDTO} bidDTO 입찰 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bidPrice(postId: number, bidDTO: BidDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bidPrice(postId, bidDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.bidPrice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 정보 변경 - 차단
         * @param {BlockMemberDTO} blockMemberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockMember(blockMemberDTO: BlockMemberDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockMember(blockMemberDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.blockMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 물품 구매 확정 기능
         * @param {PaymentDTO} paymentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmExchange(paymentDTO: PaymentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmExchange(paymentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.confirmExchange']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 계좌 생성
         * @param {AccountDTO} accountDTO 계좌 생성 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(accountDTO: AccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(accountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlarm(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlarm(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 카테고리 생성
         * @param {CategoryDTO} categoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(categoryDTO: CategoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(categoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 채팅방 생성
         * @param {ChatRoomRequestDto} chatRoomRequestDto 채팅방 생성 요청 Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatroom(chatRoomRequestDto: ChatRoomRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatroom(chatRoomRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createChatroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 팔로우
         * @param {FollowRequestDto} followRequestDto 팔로우 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFollow(followRequestDto: FollowRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFollow(followRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 작성
         * @param {  DTO} dTO 게시글 작성 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(dTO:   DTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(dTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.createPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 알람 삭제
         * @param {number} id 알람 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlarm(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlarm(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.deleteAlarm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 카테고리 삭제
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.deleteCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 채팅방 삭제
         * @param {number} id 채팅방 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatroom(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatroom(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.deleteChatroom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 삭제
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.deletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 충전 요청 기능
         * @param {DepositDTO} depositDTO 충전 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositAccount(depositDTO: DepositDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositAccount(depositDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.depositAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 채팅방 입장 시 채팅 조회
         * @param {number} roomId 채팅방 ID
         * @param {MessageSearchDTO} messageSearchDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enterRoom(roomId: number, messageSearchDTO: MessageSearchDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enterRoom(roomId, messageSearchDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.enterRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 닉네임 회원 검색
         * @param {string} nickname 검색할 닉네임
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMemberByNickname(nickname: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMemberByNickname(nickname, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.findMemberByNickname']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 보유금 조회
         * @param {} UNKNOWN_PARAMETER_NAME 계좌 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(UNKNOWN_PARAMETER_NAME: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(UNKNOWN_PARAMETER_NAME, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 알람 목록 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 당 알림 수
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlarms(page: number, size: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlarms(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getAlarms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 카테고리 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 채팅방 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatRooms(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatRoomListResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatRooms(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getChatRooms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 거래 내역 조회
         * @param {} UNKNOWN_PARAMETER_NAME 계좌 ID
         * @param {string} type 거래 타입(sender : 출금, receiver : 입금, all : 전체는 생략가능)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeAccount(UNKNOWN_PARAMETER_NAME: any, type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeAccount(UNKNOWN_PARAMETER_NAME, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getExchangeAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * sort의 값을 \"id\"로 변경하고 진행
         * @summary 팔로잉 목록 조회
         * @param {number} [page] 페이지 번호
         * @param {number} [size] 페이지 크기
         * @param {string} [sort] 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollows(page?: number, size?: number, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollows(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getFollows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내가 좋아요한 게시글 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyLikes(page: number, size: number, sort: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyLikes(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getMyLikes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내 게시글 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyPosts(page: number, size: number, sort: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyPosts(page, size, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getMyPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 상세 조회
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 목록 조회
         * @param {number} page 페이지 번호
         * @param {number} size 페이지 크기
         * @param {string} sort 정렬 기준
         * @param {  DTO} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(page: number, size: number, sort: string, searchRequest:   DTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<   DTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(page, size, sort, searchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.getPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 좋아요
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likePost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likePost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.likePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 로그인 후 response에 출력되는 access를 authorize에 입력
         * @summary 스웨거 전용 로그인
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 카테고리(nickname, phoneNum, address)에 따라 유저의 정보를 수정합니다. parameter에 수정할 항목을 작성하고 requestbody에 항목의 수정할 내용을 작성해주세요. 
         * @summary 내 정보 수정
         * @param {string} category 수정할 항목 (nickname, phoneNum, address)
         * @param {OneDataDTO} oneDataDTO 수정할 항목의 내용을 작성해주세요 nickname &#x3D;&gt; 수정할 닉네임 ex) \&quot;data\&quot; : \&quot;newNickname\&quot; phoneNum &#x3D;&gt; 수정할 전화번호 ex) \&quot;data\&quot; : \&quot;newPhoneNum\&quot; address &#x3D;&gt; 수정할 주소 ex) \&quot;data\&quot; : \&quot;newAddress\&quot; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMyDetails(category: string, oneDataDTO: OneDataDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMyDetails(category, oneDataDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.modifyMyDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 수정
         * @param {number} postId 게시글 ID
         * @param {  DTO} dTO 수정할 게시글 내용
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyPost(postId: number, dTO:   DTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPost(postId, dTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.modifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 내 상세 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myDetails(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myDetails(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.myDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 물품 결제 기능
         * @param {PaymentDTO} paymentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsGood(paymentDTO: PaymentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsGood(paymentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.paymentsGood']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 가입할 회원 정보를 RequestBody에 작성하고 실행하세요
         * @summary 회원가입
         * @param {MemberDTO} memberDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(memberDTO: MemberDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(memberDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary accessToken 만료 시 refreshToken을 이용하여 accessToken 재발급
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reissue(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reissue(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.reissue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 신고
         * @param {number} postId 게시글 ID
         * @param {  DTO} dTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportPost(postId: number, dTO:   DTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportPost(postId, dTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.reportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 언팔로우
         * @param {FollowRequestDto} followRequestDto 팔로우 요청 DTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unFollow(followRequestDto: FollowRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unFollow(followRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.unFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 좋아요 취소
         * @param {number} postId 게시글 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikePost(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlikePost(postId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.unlikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 카테고리 수정
         * @param {number} categoryId 
         * @param {CategoryDTO} categoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(categoryId: number, categoryDTO: CategoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(categoryId, categoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.updateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 게시글 이미지 업로드 및 삭제
         * @param {number} postId 
         * @param {Array<File>} [images] 
         * @param {Array<number>} [deleteImageIds] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImages(postId: number, images?: Array<File>, deleteImageIds?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImages(postId, images, deleteImageIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.updateImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 출금 요청 기능
         * @param {WithdrawDTO} withdrawDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawAccount(withdrawDTO: WithdrawDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawAccount(withdrawDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.withdrawAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 회원 탈퇴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawal(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawal(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIApi.withdrawal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIApiFp(configuration)
    return {
        /**
         * 
         * @summary 입찰 기능
         * @param {APIApiBidPriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bidPrice(requestParameters: APIApiBidPriceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bidPrice(requestParameters.postId, requestParameters.bidDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 정보 변경 - 차단
         * @param {APIApiBlockMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockMember(requestParameters: APIApiBlockMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.blockMember(requestParameters.blockMemberDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물품 구매 확정 기능
         * @param {APIApiConfirmExchangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmExchange(requestParameters: APIApiConfirmExchangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.confirmExchange(requestParameters.paymentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 계좌 생성
         * @param {APIApiCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(requestParameters: APIApiCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAccount(requestParameters.accountDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlarm(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.createAlarm(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카테고리 생성
         * @param {APIApiCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(requestParameters: APIApiCreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createCategory(requestParameters.categoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채팅방 생성
         * @param {APIApiCreateChatroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatroom(requestParameters: APIApiCreateChatroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateResponseDto> {
            return localVarFp.createChatroom(requestParameters.chatRoomRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 팔로우
         * @param {APIApiCreateFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollow(requestParameters: APIApiCreateFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowResponseDto> {
            return localVarFp.createFollow(requestParameters.followRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 작성
         * @param {APIApiCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(requestParameters: APIApiCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPost(requestParameters.dTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알람 삭제
         * @param {APIApiDeleteAlarmRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlarm(requestParameters: APIApiDeleteAlarmRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAlarm(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카테고리 삭제
         * @param {APIApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(requestParameters: APIApiDeleteCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteCategory(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채팅방 삭제
         * @param {APIApiDeleteChatroomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatroom(requestParameters: APIApiDeleteChatroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChatroom(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 삭제
         * @param {APIApiDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(requestParameters: APIApiDeletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePost(requestParameters.postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 충전 요청 기능
         * @param {APIApiDepositAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositAccount(requestParameters: APIApiDepositAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.depositAccount(requestParameters.depositDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채팅방 입장 시 채팅 조회
         * @param {APIApiEnterRoomRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enterRoom(requestParameters: APIApiEnterRoomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.enterRoom(requestParameters.roomId, requestParameters.messageSearchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 닉네임 회원 검색
         * @param {APIApiFindMemberByNicknameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberByNickname(requestParameters: APIApiFindMemberByNicknameRequest, options?: RawAxiosRequestConfig): AxiosPromise<MemberDTO> {
            return localVarFp.findMemberByNickname(requestParameters.nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 보유금 조회
         * @param {APIApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: APIApiGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAccount(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 알람 목록 조회
         * @param {APIApiGetAlarmsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlarms(requestParameters: APIApiGetAlarmsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AlarmDTO> {
            return localVarFp.getAlarms(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카테고리 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 채팅방 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatRooms(options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatRoomListResponseDto>> {
            return localVarFp.getChatRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 거래 내역 조회
         * @param {APIApiGetExchangeAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeAccount(requestParameters: APIApiGetExchangeAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExchangeDTO> {
            return localVarFp.getExchangeAccount(requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * sort의 값을 \"id\"로 변경하고 진행
         * @summary 팔로잉 목록 조회
         * @param {APIApiGetFollowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollows(requestParameters: APIApiGetFollowsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFollows(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내가 좋아요한 게시글 조회
         * @param {APIApiGetMyLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyLikes(requestParameters: APIApiGetMyLikesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyLikes(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 게시글 조회
         * @param {APIApiGetMyPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyPosts(requestParameters: APIApiGetMyPostsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyPosts(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 상세 조회
         * @param {APIApiGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(requestParameters: APIApiGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPost(requestParameters.postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 목록 조회
         * @param {APIApiGetPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(requestParameters: APIApiGetPostsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<   DTO>> {
            return localVarFp.getPosts(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.searchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 좋아요
         * @param {APIApiLikePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likePost(requestParameters: APIApiLikePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.likePost(requestParameters.postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 로그인 후 response에 출력되는 access를 authorize에 입력
         * @summary 스웨거 전용 로그인
         * @param {APIApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: APIApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.login(requestParameters.loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 로그아웃
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 카테고리(nickname, phoneNum, address)에 따라 유저의 정보를 수정합니다. parameter에 수정할 항목을 작성하고 requestbody에 항목의 수정할 내용을 작성해주세요. 
         * @summary 내 정보 수정
         * @param {APIApiModifyMyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMyDetails(requestParameters: APIApiModifyMyDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyMyDetails(requestParameters.category, requestParameters.oneDataDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 수정
         * @param {APIApiModifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPost(requestParameters: APIApiModifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyPost(requestParameters.postId, requestParameters.dTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 내 상세 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myDetails(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.myDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 물품 결제 기능
         * @param {APIApiPaymentsGoodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsGood(requestParameters: APIApiPaymentsGoodRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.paymentsGood(requestParameters.paymentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 가입할 회원 정보를 RequestBody에 작성하고 실행하세요
         * @summary 회원가입
         * @param {APIApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: APIApiRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.register(requestParameters.memberDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary accessToken 만료 시 refreshToken을 이용하여 accessToken 재발급
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reissue(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.reissue(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 신고
         * @param {APIApiReportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPost(requestParameters: APIApiReportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reportPost(requestParameters.postId, requestParameters.dTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 언팔로우
         * @param {APIApiUnFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unFollow(requestParameters: APIApiUnFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowResponseDto> {
            return localVarFp.unFollow(requestParameters.followRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 좋아요 취소
         * @param {APIApiUnlikePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikePost(requestParameters: APIApiUnlikePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unlikePost(requestParameters.postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카테고리 수정
         * @param {APIApiUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(requestParameters: APIApiUpdateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateCategory(requestParameters.categoryId, requestParameters.categoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 게시글 이미지 업로드 및 삭제
         * @param {APIApiUpdateImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImages(requestParameters: APIApiUpdateImagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateImages(requestParameters.postId, requestParameters.images, requestParameters.deleteImageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 출금 요청 기능
         * @param {APIApiWithdrawAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawAccount(requestParameters: APIApiWithdrawAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.withdrawAccount(requestParameters.withdrawDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 탈퇴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawal(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.withdrawal(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIApi - interface
 * @export
 * @interface APIApi
 */
export interface APIApiInterface {
    /**
     * 
     * @summary 입찰 기능
     * @param {APIApiBidPriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    bidPrice(requestParameters: APIApiBidPriceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 회원 정보 변경 - 차단
     * @param {APIApiBlockMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    blockMember(requestParameters: APIApiBlockMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 물품 구매 확정 기능
     * @param {APIApiConfirmExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    confirmExchange(requestParameters: APIApiConfirmExchangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 계좌 생성
     * @param {APIApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createAccount(requestParameters: APIApiCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createAlarm(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }>;

    /**
     * 
     * @summary 카테고리 생성
     * @param {APIApiCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createCategory(requestParameters: APIApiCreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 채팅방 생성
     * @param {APIApiCreateChatroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createChatroom(requestParameters: APIApiCreateChatroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateResponseDto>;

    /**
     * 
     * @summary 팔로우
     * @param {APIApiCreateFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createFollow(requestParameters: APIApiCreateFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowResponseDto>;

    /**
     * 
     * @summary 게시글 작성
     * @param {APIApiCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    createPost(requestParameters: APIApiCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 알람 삭제
     * @param {APIApiDeleteAlarmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    deleteAlarm(requestParameters: APIApiDeleteAlarmRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 카테고리 삭제
     * @param {APIApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    deleteCategory(requestParameters: APIApiDeleteCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 채팅방 삭제
     * @param {APIApiDeleteChatroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    deleteChatroom(requestParameters: APIApiDeleteChatroomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 게시글 삭제
     * @param {APIApiDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    deletePost(requestParameters: APIApiDeletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 충전 요청 기능
     * @param {APIApiDepositAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    depositAccount(requestParameters: APIApiDepositAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 채팅방 입장 시 채팅 조회
     * @param {APIApiEnterRoomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    enterRoom(requestParameters: APIApiEnterRoomRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 닉네임 회원 검색
     * @param {APIApiFindMemberByNicknameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    findMemberByNickname(requestParameters: APIApiFindMemberByNicknameRequest, options?: RawAxiosRequestConfig): AxiosPromise<MemberDTO>;

    /**
     * 
     * @summary 보유금 조회
     * @param {APIApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getAccount(requestParameters: APIApiGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 알람 목록 조회
     * @param {APIApiGetAlarmsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getAlarms(requestParameters: APIApiGetAlarmsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AlarmDTO>;

    /**
     * 
     * @summary 카테고리 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getCategories(options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 채팅방 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getChatRooms(options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatRoomListResponseDto>>;

    /**
     * 
     * @summary 거래 내역 조회
     * @param {APIApiGetExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getExchangeAccount(requestParameters: APIApiGetExchangeAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExchangeDTO>;

    /**
     * sort의 값을 \"id\"로 변경하고 진행
     * @summary 팔로잉 목록 조회
     * @param {APIApiGetFollowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getFollows(requestParameters?: APIApiGetFollowsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getMembers(options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 내가 좋아요한 게시글 조회
     * @param {APIApiGetMyLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getMyLikes(requestParameters: APIApiGetMyLikesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 내 게시글 조회
     * @param {APIApiGetMyPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getMyPosts(requestParameters: APIApiGetMyPostsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 게시글 상세 조회
     * @param {APIApiGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getPost(requestParameters: APIApiGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 게시글 목록 조회
     * @param {APIApiGetPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    getPosts(requestParameters: APIApiGetPostsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<   DTO>>;

    /**
     * 
     * @summary 게시글 좋아요
     * @param {APIApiLikePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    likePost(requestParameters: APIApiLikePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 로그인 후 response에 출력되는 access를 authorize에 입력
     * @summary 스웨거 전용 로그인
     * @param {APIApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    login(requestParameters: APIApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    logout(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 카테고리(nickname, phoneNum, address)에 따라 유저의 정보를 수정합니다. parameter에 수정할 항목을 작성하고 requestbody에 항목의 수정할 내용을 작성해주세요. 
     * @summary 내 정보 수정
     * @param {APIApiModifyMyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    modifyMyDetails(requestParameters: APIApiModifyMyDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 게시글 수정
     * @param {APIApiModifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    modifyPost(requestParameters: APIApiModifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 내 상세 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    myDetails(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 물품 결제 기능
     * @param {APIApiPaymentsGoodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    paymentsGood(requestParameters: APIApiPaymentsGoodRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 가입할 회원 정보를 RequestBody에 작성하고 실행하세요
     * @summary 회원가입
     * @param {APIApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    register(requestParameters: APIApiRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary accessToken 만료 시 refreshToken을 이용하여 accessToken 재발급
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    reissue(options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 게시글 신고
     * @param {APIApiReportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    reportPost(requestParameters: APIApiReportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 언팔로우
     * @param {APIApiUnFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    unFollow(requestParameters: APIApiUnFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<FollowResponseDto>;

    /**
     * 
     * @summary 좋아요 취소
     * @param {APIApiUnlikePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    unlikePost(requestParameters: APIApiUnlikePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 카테고리 수정
     * @param {APIApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    updateCategory(requestParameters: APIApiUpdateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * 
     * @summary 게시글 이미지 업로드 및 삭제
     * @param {APIApiUpdateImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    updateImages(requestParameters: APIApiUpdateImagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 출금 요청 기능
     * @param {APIApiWithdrawAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    withdrawAccount(requestParameters: APIApiWithdrawAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApiInterface
     */
    withdrawal(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for bidPrice operation in APIApi.
 * @export
 * @interface APIApiBidPriceRequest
 */
export interface APIApiBidPriceRequest {
    /**
     * 
     * @type {number}
     * @memberof APIApiBidPrice
     */
    readonly postId: number

    /**
     * 입찰 DTO
     * @type {BidDTO}
     * @memberof APIApiBidPrice
     */
    readonly bidDTO: BidDTO
}

/**
 * Request parameters for blockMember operation in APIApi.
 * @export
 * @interface APIApiBlockMemberRequest
 */
export interface APIApiBlockMemberRequest {
    /**
     * 
     * @type {BlockMemberDTO}
     * @memberof APIApiBlockMember
     */
    readonly blockMemberDTO: BlockMemberDTO
}

/**
 * Request parameters for confirmExchange operation in APIApi.
 * @export
 * @interface APIApiConfirmExchangeRequest
 */
export interface APIApiConfirmExchangeRequest {
    /**
     * 
     * @type {PaymentDTO}
     * @memberof APIApiConfirmExchange
     */
    readonly paymentDTO: PaymentDTO
}

/**
 * Request parameters for createAccount operation in APIApi.
 * @export
 * @interface APIApiCreateAccountRequest
 */
export interface APIApiCreateAccountRequest {
    /**
     * 계좌 생성 DTO
     * @type {AccountDTO}
     * @memberof APIApiCreateAccount
     */
    readonly accountDTO: AccountDTO
}

/**
 * Request parameters for createCategory operation in APIApi.
 * @export
 * @interface APIApiCreateCategoryRequest
 */
export interface APIApiCreateCategoryRequest {
    /**
     * 
     * @type {CategoryDTO}
     * @memberof APIApiCreateCategory
     */
    readonly categoryDTO: CategoryDTO
}

/**
 * Request parameters for createChatroom operation in APIApi.
 * @export
 * @interface APIApiCreateChatroomRequest
 */
export interface APIApiCreateChatroomRequest {
    /**
     * 채팅방 생성 요청 Body
     * @type {ChatRoomRequestDto}
     * @memberof APIApiCreateChatroom
     */
    readonly chatRoomRequestDto: ChatRoomRequestDto
}

/**
 * Request parameters for createFollow operation in APIApi.
 * @export
 * @interface APIApiCreateFollowRequest
 */
export interface APIApiCreateFollowRequest {
    /**
     * 팔로우 요청 DTO
     * @type {FollowRequestDto}
     * @memberof APIApiCreateFollow
     */
    readonly followRequestDto: FollowRequestDto
}

/**
 * Request parameters for createPost operation in APIApi.
 * @export
 * @interface APIApiCreatePostRequest
 */
export interface APIApiCreatePostRequest {
    /**
     * 게시글 작성 요청 DTO
     * @type {  DTO}
     * @memberof APIApiCreatePost
     */
    readonly dTO:   DTO
}

/**
 * Request parameters for deleteAlarm operation in APIApi.
 * @export
 * @interface APIApiDeleteAlarmRequest
 */
export interface APIApiDeleteAlarmRequest {
    /**
     * 알람 ID
     * @type {number}
     * @memberof APIApiDeleteAlarm
     */
    readonly id: number
}

/**
 * Request parameters for deleteCategory operation in APIApi.
 * @export
 * @interface APIApiDeleteCategoryRequest
 */
export interface APIApiDeleteCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof APIApiDeleteCategory
     */
    readonly categoryId: number
}

/**
 * Request parameters for deleteChatroom operation in APIApi.
 * @export
 * @interface APIApiDeleteChatroomRequest
 */
export interface APIApiDeleteChatroomRequest {
    /**
     * 채팅방 ID
     * @type {number}
     * @memberof APIApiDeleteChatroom
     */
    readonly id: number
}

/**
 * Request parameters for deletePost operation in APIApi.
 * @export
 * @interface APIApiDeletePostRequest
 */
export interface APIApiDeletePostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiDeletePost
     */
    readonly postId: number
}

/**
 * Request parameters for depositAccount operation in APIApi.
 * @export
 * @interface APIApiDepositAccountRequest
 */
export interface APIApiDepositAccountRequest {
    /**
     * 충전 DTO
     * @type {DepositDTO}
     * @memberof APIApiDepositAccount
     */
    readonly depositDTO: DepositDTO
}

/**
 * Request parameters for enterRoom operation in APIApi.
 * @export
 * @interface APIApiEnterRoomRequest
 */
export interface APIApiEnterRoomRequest {
    /**
     * 채팅방 ID
     * @type {number}
     * @memberof APIApiEnterRoom
     */
    readonly roomId: number

    /**
     * 
     * @type {MessageSearchDTO}
     * @memberof APIApiEnterRoom
     */
    readonly messageSearchDTO: MessageSearchDTO
}

/**
 * Request parameters for findMemberByNickname operation in APIApi.
 * @export
 * @interface APIApiFindMemberByNicknameRequest
 */
export interface APIApiFindMemberByNicknameRequest {
    /**
     * 검색할 닉네임
     * @type {string}
     * @memberof APIApiFindMemberByNickname
     */
    readonly nickname: string
}

/**
 * Request parameters for getAccount operation in APIApi.
 * @export
 * @interface APIApiGetAccountRequest
 */
export interface APIApiGetAccountRequest {
    /**
     * 계좌 ID
     * @type {}
     * @memberof APIApiGetAccount
     */
    readonly UNKNOWN_PARAMETER_NAME: any
}

/**
 * Request parameters for getAlarms operation in APIApi.
 * @export
 * @interface APIApiGetAlarmsRequest
 */
export interface APIApiGetAlarmsRequest {
    /**
     * 페이지 번호
     * @type {number}
     * @memberof APIApiGetAlarms
     */
    readonly page: number

    /**
     * 페이지 당 알림 수
     * @type {number}
     * @memberof APIApiGetAlarms
     */
    readonly size: number
}

/**
 * Request parameters for getExchangeAccount operation in APIApi.
 * @export
 * @interface APIApiGetExchangeAccountRequest
 */
export interface APIApiGetExchangeAccountRequest {
    /**
     * 계좌 ID
     * @type {}
     * @memberof APIApiGetExchangeAccount
     */
    readonly UNKNOWN_PARAMETER_NAME: any

    /**
     * 거래 타입(sender : 출금, receiver : 입금, all : 전체는 생략가능)
     * @type {string}
     * @memberof APIApiGetExchangeAccount
     */
    readonly type: string
}

/**
 * Request parameters for getFollows operation in APIApi.
 * @export
 * @interface APIApiGetFollowsRequest
 */
export interface APIApiGetFollowsRequest {
    /**
     * 페이지 번호
     * @type {number}
     * @memberof APIApiGetFollows
     */
    readonly page?: number

    /**
     * 페이지 크기
     * @type {number}
     * @memberof APIApiGetFollows
     */
    readonly size?: number

    /**
     * 정렬 기준
     * @type {string}
     * @memberof APIApiGetFollows
     */
    readonly sort?: string
}

/**
 * Request parameters for getMyLikes operation in APIApi.
 * @export
 * @interface APIApiGetMyLikesRequest
 */
export interface APIApiGetMyLikesRequest {
    /**
     * 페이지 번호
     * @type {number}
     * @memberof APIApiGetMyLikes
     */
    readonly page: number

    /**
     * 페이지 크기
     * @type {number}
     * @memberof APIApiGetMyLikes
     */
    readonly size: number

    /**
     * 정렬 기준
     * @type {string}
     * @memberof APIApiGetMyLikes
     */
    readonly sort: string
}

/**
 * Request parameters for getMyPosts operation in APIApi.
 * @export
 * @interface APIApiGetMyPostsRequest
 */
export interface APIApiGetMyPostsRequest {
    /**
     * 페이지 번호
     * @type {number}
     * @memberof APIApiGetMyPosts
     */
    readonly page: number

    /**
     * 페이지 크기
     * @type {number}
     * @memberof APIApiGetMyPosts
     */
    readonly size: number

    /**
     * 정렬 기준
     * @type {string}
     * @memberof APIApiGetMyPosts
     */
    readonly sort: string
}

/**
 * Request parameters for getPost operation in APIApi.
 * @export
 * @interface APIApiGetPostRequest
 */
export interface APIApiGetPostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiGetPost
     */
    readonly postId: number
}

/**
 * Request parameters for getPosts operation in APIApi.
 * @export
 * @interface APIApiGetPostsRequest
 */
export interface APIApiGetPostsRequest {
    /**
     * 페이지 번호
     * @type {number}
     * @memberof APIApiGetPosts
     */
    readonly page: number

    /**
     * 페이지 크기
     * @type {number}
     * @memberof APIApiGetPosts
     */
    readonly size: number

    /**
     * 정렬 기준
     * @type {string}
     * @memberof APIApiGetPosts
     */
    readonly sort: string

    /**
     * 
     * @type {  DTO}
     * @memberof APIApiGetPosts
     */
    readonly searchRequest:   DTO
}

/**
 * Request parameters for likePost operation in APIApi.
 * @export
 * @interface APIApiLikePostRequest
 */
export interface APIApiLikePostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiLikePost
     */
    readonly postId: number
}

/**
 * Request parameters for login operation in APIApi.
 * @export
 * @interface APIApiLoginRequest
 */
export interface APIApiLoginRequest {
    /**
     * 
     * @type {LoginDto}
     * @memberof APIApiLogin
     */
    readonly loginDto: LoginDto
}

/**
 * Request parameters for modifyMyDetails operation in APIApi.
 * @export
 * @interface APIApiModifyMyDetailsRequest
 */
export interface APIApiModifyMyDetailsRequest {
    /**
     * 수정할 항목 (nickname, phoneNum, address)
     * @type {string}
     * @memberof APIApiModifyMyDetails
     */
    readonly category: string

    /**
     * 수정할 항목의 내용을 작성해주세요 nickname &#x3D;&gt; 수정할 닉네임 ex) \&quot;data\&quot; : \&quot;newNickname\&quot; phoneNum &#x3D;&gt; 수정할 전화번호 ex) \&quot;data\&quot; : \&quot;newPhoneNum\&quot; address &#x3D;&gt; 수정할 주소 ex) \&quot;data\&quot; : \&quot;newAddress\&quot; 
     * @type {OneDataDTO}
     * @memberof APIApiModifyMyDetails
     */
    readonly oneDataDTO: OneDataDTO
}

/**
 * Request parameters for modifyPost operation in APIApi.
 * @export
 * @interface APIApiModifyPostRequest
 */
export interface APIApiModifyPostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiModifyPost
     */
    readonly postId: number

    /**
     * 수정할 게시글 내용
     * @type {  DTO}
     * @memberof APIApiModifyPost
     */
    readonly dTO:   DTO
}

/**
 * Request parameters for paymentsGood operation in APIApi.
 * @export
 * @interface APIApiPaymentsGoodRequest
 */
export interface APIApiPaymentsGoodRequest {
    /**
     * 
     * @type {PaymentDTO}
     * @memberof APIApiPaymentsGood
     */
    readonly paymentDTO: PaymentDTO
}

/**
 * Request parameters for register operation in APIApi.
 * @export
 * @interface APIApiRegisterRequest
 */
export interface APIApiRegisterRequest {
    /**
     * 
     * @type {MemberDTO}
     * @memberof APIApiRegister
     */
    readonly memberDTO: MemberDTO
}

/**
 * Request parameters for reportPost operation in APIApi.
 * @export
 * @interface APIApiReportPostRequest
 */
export interface APIApiReportPostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiReportPost
     */
    readonly postId: number

    /**
     * 
     * @type {  DTO}
     * @memberof APIApiReportPost
     */
    readonly dTO:   DTO
}

/**
 * Request parameters for unFollow operation in APIApi.
 * @export
 * @interface APIApiUnFollowRequest
 */
export interface APIApiUnFollowRequest {
    /**
     * 팔로우 요청 DTO
     * @type {FollowRequestDto}
     * @memberof APIApiUnFollow
     */
    readonly followRequestDto: FollowRequestDto
}

/**
 * Request parameters for unlikePost operation in APIApi.
 * @export
 * @interface APIApiUnlikePostRequest
 */
export interface APIApiUnlikePostRequest {
    /**
     * 게시글 ID
     * @type {number}
     * @memberof APIApiUnlikePost
     */
    readonly postId: number
}

/**
 * Request parameters for updateCategory operation in APIApi.
 * @export
 * @interface APIApiUpdateCategoryRequest
 */
export interface APIApiUpdateCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof APIApiUpdateCategory
     */
    readonly categoryId: number

    /**
     * 
     * @type {CategoryDTO}
     * @memberof APIApiUpdateCategory
     */
    readonly categoryDTO: CategoryDTO
}

/**
 * Request parameters for updateImages operation in APIApi.
 * @export
 * @interface APIApiUpdateImagesRequest
 */
export interface APIApiUpdateImagesRequest {
    /**
     * 
     * @type {number}
     * @memberof APIApiUpdateImages
     */
    readonly postId: number

    /**
     * 
     * @type {Array<File>}
     * @memberof APIApiUpdateImages
     */
    readonly images?: Array<File>

    /**
     * 
     * @type {Array<number>}
     * @memberof APIApiUpdateImages
     */
    readonly deleteImageIds?: Array<number>
}

/**
 * Request parameters for withdrawAccount operation in APIApi.
 * @export
 * @interface APIApiWithdrawAccountRequest
 */
export interface APIApiWithdrawAccountRequest {
    /**
     * 
     * @type {WithdrawDTO}
     * @memberof APIApiWithdrawAccount
     */
    readonly withdrawDTO: WithdrawDTO
}

/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI implements APIApiInterface {
    /**
     * 
     * @summary 입찰 기능
     * @param {APIApiBidPriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public bidPrice(requestParameters: APIApiBidPriceRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).bidPrice(requestParameters.postId, requestParameters.bidDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 정보 변경 - 차단
     * @param {APIApiBlockMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public blockMember(requestParameters: APIApiBlockMemberRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).blockMember(requestParameters.blockMemberDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물품 구매 확정 기능
     * @param {APIApiConfirmExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public confirmExchange(requestParameters: APIApiConfirmExchangeRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).confirmExchange(requestParameters.paymentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 계좌 생성
     * @param {APIApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createAccount(requestParameters: APIApiCreateAccountRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createAccount(requestParameters.accountDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createAlarm(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createAlarm(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카테고리 생성
     * @param {APIApiCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createCategory(requestParameters: APIApiCreateCategoryRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createCategory(requestParameters.categoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채팅방 생성
     * @param {APIApiCreateChatroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createChatroom(requestParameters: APIApiCreateChatroomRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createChatroom(requestParameters.chatRoomRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 팔로우
     * @param {APIApiCreateFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createFollow(requestParameters: APIApiCreateFollowRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createFollow(requestParameters.followRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 작성
     * @param {APIApiCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public createPost(requestParameters: APIApiCreatePostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).createPost(requestParameters.dTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알람 삭제
     * @param {APIApiDeleteAlarmRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deleteAlarm(requestParameters: APIApiDeleteAlarmRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).deleteAlarm(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카테고리 삭제
     * @param {APIApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deleteCategory(requestParameters: APIApiDeleteCategoryRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).deleteCategory(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채팅방 삭제
     * @param {APIApiDeleteChatroomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deleteChatroom(requestParameters: APIApiDeleteChatroomRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).deleteChatroom(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 삭제
     * @param {APIApiDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public deletePost(requestParameters: APIApiDeletePostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).deletePost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 충전 요청 기능
     * @param {APIApiDepositAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public depositAccount(requestParameters: APIApiDepositAccountRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).depositAccount(requestParameters.depositDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채팅방 입장 시 채팅 조회
     * @param {APIApiEnterRoomRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public enterRoom(requestParameters: APIApiEnterRoomRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).enterRoom(requestParameters.roomId, requestParameters.messageSearchDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 닉네임 회원 검색
     * @param {APIApiFindMemberByNicknameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public findMemberByNickname(requestParameters: APIApiFindMemberByNicknameRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).findMemberByNickname(requestParameters.nickname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 보유금 조회
     * @param {APIApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getAccount(requestParameters: APIApiGetAccountRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getAccount(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 알람 목록 조회
     * @param {APIApiGetAlarmsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getAlarms(requestParameters: APIApiGetAlarmsRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getAlarms(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카테고리 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getCategories(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 채팅방 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getChatRooms(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getChatRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 거래 내역 조회
     * @param {APIApiGetExchangeAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getExchangeAccount(requestParameters: APIApiGetExchangeAccountRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getExchangeAccount(requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * sort의 값을 \"id\"로 변경하고 진행
     * @summary 팔로잉 목록 조회
     * @param {APIApiGetFollowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getFollows(requestParameters: APIApiGetFollowsRequest = {}, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getFollows(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getMembers(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내가 좋아요한 게시글 조회
     * @param {APIApiGetMyLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getMyLikes(requestParameters: APIApiGetMyLikesRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getMyLikes(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 게시글 조회
     * @param {APIApiGetMyPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getMyPosts(requestParameters: APIApiGetMyPostsRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getMyPosts(requestParameters.page, requestParameters.size, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 상세 조회
     * @param {APIApiGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getPost(requestParameters: APIApiGetPostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getPost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 목록 조회
     * @param {APIApiGetPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getPosts(requestParameters: APIApiGetPostsRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).getPosts(requestParameters.page, requestParameters.size, requestParameters.sort, requestParameters.searchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 좋아요
     * @param {APIApiLikePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public likePost(requestParameters: APIApiLikePostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).likePost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 로그인 후 response에 출력되는 access를 authorize에 입력
     * @summary 스웨거 전용 로그인
     * @param {APIApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public login(requestParameters: APIApiLoginRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).login(requestParameters.loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 로그아웃
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 카테고리(nickname, phoneNum, address)에 따라 유저의 정보를 수정합니다. parameter에 수정할 항목을 작성하고 requestbody에 항목의 수정할 내용을 작성해주세요. 
     * @summary 내 정보 수정
     * @param {APIApiModifyMyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public modifyMyDetails(requestParameters: APIApiModifyMyDetailsRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).modifyMyDetails(requestParameters.category, requestParameters.oneDataDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 수정
     * @param {APIApiModifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public modifyPost(requestParameters: APIApiModifyPostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).modifyPost(requestParameters.postId, requestParameters.dTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 내 상세 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public myDetails(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).myDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 물품 결제 기능
     * @param {APIApiPaymentsGoodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public paymentsGood(requestParameters: APIApiPaymentsGoodRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).paymentsGood(requestParameters.paymentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 가입할 회원 정보를 RequestBody에 작성하고 실행하세요
     * @summary 회원가입
     * @param {APIApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public register(requestParameters: APIApiRegisterRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).register(requestParameters.memberDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary accessToken 만료 시 refreshToken을 이용하여 accessToken 재발급
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public reissue(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).reissue(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 신고
     * @param {APIApiReportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public reportPost(requestParameters: APIApiReportPostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).reportPost(requestParameters.postId, requestParameters.dTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 언팔로우
     * @param {APIApiUnFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public unFollow(requestParameters: APIApiUnFollowRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).unFollow(requestParameters.followRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 좋아요 취소
     * @param {APIApiUnlikePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public unlikePost(requestParameters: APIApiUnlikePostRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).unlikePost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카테고리 수정
     * @param {APIApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public updateCategory(requestParameters: APIApiUpdateCategoryRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).updateCategory(requestParameters.categoryId, requestParameters.categoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 게시글 이미지 업로드 및 삭제
     * @param {APIApiUpdateImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public updateImages(requestParameters: APIApiUpdateImagesRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).updateImages(requestParameters.postId, requestParameters.images, requestParameters.deleteImageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 출금 요청 기능
     * @param {APIApiWithdrawAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public withdrawAccount(requestParameters: APIApiWithdrawAccountRequest, options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).withdrawAccount(requestParameters.withdrawDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 탈퇴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public withdrawal(options?: RawAxiosRequestConfig) {
        return APIApiFp(this.configuration).withdrawal(options).then((request) => request(this.axios, this.basePath));
    }
}

